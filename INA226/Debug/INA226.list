
INA226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ec  080043ec  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080043ec  080043ec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f4  080043f4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043f8  080043f8  000053f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08004458  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004458  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0a2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173e  00000000  00000000  0001012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00011870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000738  00000000  00000000  000121a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b8c  00000000  00000000  000128d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b627  00000000  00000000  00028464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a1e  00000000  00000000  00033a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb4a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  000bb4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000be0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004268 	.word	0x08004268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004268 	.word	0x08004268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000608:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <INA226_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool INA226_Init(I2C_HandleTypeDef *hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af02      	add	r7, sp, #8
 800092a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    // 1) Reset device (write 0x8000 to CONFIG)
    buf[0] = INA226_REG_CONF;
 800092c:	2300      	movs	r3, #0
 800092e:	733b      	strb	r3, [r7, #12]
    buf[1] = 0x80;
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8000934:	2300      	movs	r3, #0
 8000936:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2303      	movs	r3, #3
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f001 f81a 	bl	8001980 <HAL_I2C_Master_Transmit>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <INA226_Init+0x32>
        return false;
 8000952:	2300      	movs	r3, #0
 8000954:	e02d      	b.n	80009b2 <INA226_Init+0x8e>
    HAL_Delay(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f000 fc0c 	bl	8001174 <HAL_Delay>

    // 2) Write default CONFIG (averaging, conversion times, continuous)
    buf[0] = INA226_REG_CONF;
 800095c:	2300      	movs	r3, #0
 800095e:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(INA226_CONF_DEFAULT >> 8);
 8000960:	2301      	movs	r3, #1
 8000962:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(INA226_CONF_DEFAULT & 0xFF);
 8000964:	2387      	movs	r3, #135	@ 0x87
 8000966:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2303      	movs	r3, #3
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f001 f802 	bl	8001980 <HAL_I2C_Master_Transmit>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <INA226_Init+0x62>
        return false;
 8000982:	2300      	movs	r3, #0
 8000984:	e015      	b.n	80009b2 <INA226_Init+0x8e>

    // 3) Write CALIBRATION register
    buf[0] = INA226_REG_CALIB;
 8000986:	2305      	movs	r3, #5
 8000988:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(INA226_CALIB_VALUE >> 8);
 800098a:	2308      	movs	r3, #8
 800098c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(INA226_CALIB_VALUE & 0xFF);
 800098e:	23bc      	movs	r3, #188	@ 0xbc
 8000990:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2303      	movs	r3, #3
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 ffed 	bl	8001980 <HAL_I2C_Master_Transmit>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <INA226_Init+0x8c>
        return false;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e000      	b.n	80009b2 <INA226_Init+0x8e>

    return true;
 80009b0:	2301      	movs	r3, #1
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <INA226_ReadCurrent>:
 * @param  hi2c        Your HAL I2C handle
 * @param  outCurrent  Pointer to float to receive the result
 * @return true on success, false on I²C error or timeout
 */
bool INA226_ReadCurrent(I2C_HandleTypeDef *hi2c, float *outCurrent)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    uint8_t buf[2];
    uint16_t raw;

    // wait >2 conversions (≈2.2 ms), use 3 ms
    HAL_Delay(3);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 fbd4 	bl	8001174 <HAL_Delay>

    // read CURRENT reg
    if (HAL_I2C_Mem_Read(hi2c, INA226_I2C_ADDR, INA226_REG_CURRENT,
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2302      	movs	r3, #2
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	2204      	movs	r2, #4
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f001 f8ca 	bl	8001b7c <HAL_I2C_Mem_Read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <INA226_ReadCurrent+0x3c>
                         I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
        debugFTDI("RD: I2C read error\r\n");
 80009ee:	481a      	ldr	r0, [pc, #104]	@ (8000a58 <INA226_ReadCurrent+0x9c>)
 80009f0:	f000 f83c 	bl	8000a6c <debugFTDI>
        return false;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e02b      	b.n	8000a50 <INA226_ReadCurrent+0x94>
    }
    raw = (buf[0] << 8) | buf[1];
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	7b7b      	ldrb	r3, [r7, #13]
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	82fb      	strh	r3, [r7, #22]
    debugFTDI("RD: RAW_CURRENT = 0x%04X\r\n", raw);
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <INA226_ReadCurrent+0xa0>)
 8000a10:	f000 f82c 	bl	8000a6c <debugFTDI>

    // convert to amps
    *outCurrent = (int16_t)raw * INA226_CURRENT_LSB;
 8000a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000a60 <INA226_ReadCurrent+0xa4>
 8000a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	edc3 7a00 	vstr	s15, [r3]
    // print in mA as integer
    int32_t mA = (int32_t)(*outCurrent * 1000.0f);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	edd3 7a00 	vldr	s15, [r3]
 8000a34:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000a64 <INA226_ReadCurrent+0xa8>
 8000a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	613b      	str	r3, [r7, #16]
    debugFTDI("RD: Current = %ld mA\r\n", mA);
 8000a46:	6939      	ldr	r1, [r7, #16]
 8000a48:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <INA226_ReadCurrent+0xac>)
 8000a4a:	f000 f80f 	bl	8000a6c <debugFTDI>

    return true;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	08004280 	.word	0x08004280
 8000a5c:	08004298 	.word	0x08004298
 8000a60:	3b480000 	.word	0x3b480000
 8000a64:	447a0000 	.word	0x447a0000
 8000a68:	080042b4 	.word	0x080042b4

08000a6c <debugFTDI>:
void debugFTDI(const char *fmt, ...) {
 8000a6c:	b40f      	push	{r0, r1, r2, r3}
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b0f4      	sub	sp, #464	@ 0x1d0
 8000a72:	af00      	add	r7, sp, #0
	char buf[450];
	va_list args;
	va_start(args, fmt);
 8000a74:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 8000a78:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000a7c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000a80:	601a      	str	r2, [r3, #0]
	int len = vsnprintf(buf, sizeof(buf), fmt, args);
 8000a82:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000a86:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000a8a:	f107 0008 	add.w	r0, r7, #8
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000a94:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8000a98:	f002 ff5a 	bl	8003950 <vsniprintf>
 8000a9c:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
	va_end(args);

	if (len > 0) {
 8000aa0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dd11      	ble.n	8000acc <debugFTDI+0x60>
		// ensure we don’t overrun if vsnprintf truncated
		uint16_t txlen = (len < sizeof(buf)) ? len : (sizeof(buf) - 1);
 8000aa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000aac:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	bf28      	it	cs
 8000ab4:	4613      	movcs	r3, r2
 8000ab6:	f8a7 31ca 	strh.w	r3, [r7, #458]	@ 0x1ca
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, txlen, HAL_MAX_DELAY);
 8000aba:	f8b7 21ca 	ldrh.w	r2, [r7, #458]	@ 0x1ca
 8000abe:	f107 0108 	add.w	r1, r7, #8
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <debugFTDI+0x70>)
 8000ac8:	f002 faf9 	bl	80030be <HAL_UART_Transmit>
	}
}
 8000acc:	bf00      	nop
 8000ace:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr
 8000adc:	200000cc 	.word	0x200000cc

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fad3 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f84b 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f90d 	bl	8000d0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000af2:	f000 f8b3 	bl	8000c5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000af6:	f000 f8df 	bl	8000cb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &uart1_rx_char, 1);  // Start UART reception
 8000afa:	2201      	movs	r2, #1
 8000afc:	4919      	ldr	r1, [pc, #100]	@ (8000b64 <main+0x84>)
 8000afe:	481a      	ldr	r0, [pc, #104]	@ (8000b68 <main+0x88>)
 8000b00:	f002 fb68 	bl	80031d4 <HAL_UART_Receive_IT>
  if (!INA226_Init(&hi2c1)) {
 8000b04:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <main+0x8c>)
 8000b06:	f7ff ff0d 	bl	8000924 <INA226_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d004      	beq.n	8000b20 <main+0x40>
      debugFTDI("INA226 init FAILED!\r\n");
 8000b16:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <main+0x90>)
 8000b18:	f7ff ffa8 	bl	8000a6c <debugFTDI>
      while (1);
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <main+0x3c>
  }else{
      debugFTDI("INA226 OK!\r\n");
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <main+0x94>)
 8000b22:	f7ff ffa3 	bl	8000a6c <debugFTDI>
  /* USER CODE BEGIN WHILE */
  float current;

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2a:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <main+0x98>)
 8000b2c:	f000 fdc9 	bl	80016c2 <HAL_GPIO_TogglePin>
	  float I;
	  if (INA226_ReadCurrent(&hi2c1, &I)) {
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <main+0x8c>)
 8000b36:	f7ff ff41 	bl	80009bc <INA226_ReadCurrent>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d009      	beq.n	8000b54 <main+0x74>
	      // already printed inside; or do:
	      debugFTDI("Main: I = %.3f A\r\n", I);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fd00 	bl	8000548 <__aeabi_f2d>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <main+0x9c>)
 8000b4e:	f7ff ff8d 	bl	8000a6c <debugFTDI>
 8000b52:	e002      	b.n	8000b5a <main+0x7a>
	  } else {
	      debugFTDI("Main: read error\r\n");
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <main+0xa0>)
 8000b56:	f7ff ff89 	bl	8000a6c <debugFTDI>
	  }
	  HAL_Delay(500);
 8000b5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b5e:	f000 fb09 	bl	8001174 <HAL_Delay>
  {
 8000b62:	e7e0      	b.n	8000b26 <main+0x46>
 8000b64:	20000114 	.word	0x20000114
 8000b68:	200000cc 	.word	0x200000cc
 8000b6c:	20000078 	.word	0x20000078
 8000b70:	08004350 	.word	0x08004350
 8000b74:	08004368 	.word	0x08004368
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	08004378 	.word	0x08004378
 8000b80:	0800438c 	.word	0x0800438c

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	2230      	movs	r2, #48	@ 0x30
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 feea 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <SystemClock_Config+0xd0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <SystemClock_Config+0xd0>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <SystemClock_Config+0xd0>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <SystemClock_Config+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd0:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <SystemClock_Config+0xd4>)
 8000bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <SystemClock_Config+0xd4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf8:	2319      	movs	r3, #25
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bfc:	23a8      	movs	r3, #168	@ 0xa8
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd87 	bl	8002720 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c18:	f000 f8d8 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2102      	movs	r1, #2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 ffe9 	bl	8002c10 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c44:	f000 f8c2 	bl	8000dcc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c48:	f002 f8c8 	bl	8002ddc <HAL_RCC_EnableCSS>
}
 8000c4c:	bf00      	nop
 8000c4e:	3750      	adds	r7, #80	@ 0x50
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f000 fd2d 	bl	80016f8 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f892 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000078 	.word	0x20000078
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <MX_USART1_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	f002 f995 	bl	800301e <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f867 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000cc 	.word	0x200000cc
 8000d08:	40011000 	.word	0x40011000

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a26      	ldr	r2, [pc, #152]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d98:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d9a:	f000 fc79 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <MX_GPIO_Init+0xbc>)
 8000db8:	f000 fae6 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_I2C_MspInit+0x84>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12c      	bne.n	8000ea4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e84:	f000 fa80 	bl	8001388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	@ 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020400 	.word	0x40020400

08000eb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	@ (8000f3c <HAL_UART_MspInit+0x84>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_UART_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000f12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f24:	2307      	movs	r3, #7
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_UART_MspInit+0x8c>)
 8000f30:	f000 fa2a 	bl	8001388 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f4c:	f002 f84c 	bl	8002fe8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x8>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f8c7 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f002 fcce 	bl	800397c <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20010000 	.word	0x20010000
 800100c:	00000400 	.word	0x00000400
 8001010:	20000118 	.word	0x20000118
 8001014:	20000268 	.word	0x20000268

08001018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f002 fc8d 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fd37 	bl	8000ae0 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001080:	080043fc 	.word	0x080043fc
  ldr r2, =_sbss
 8001084:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001088:	20000268 	.word	0x20000268

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f931 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe88 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f93b 	bl	800136e <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001110:	f000 f911 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	2000011c 	.word	0x2000011c

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000011c 	.word	0x2000011c

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff47 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff5c 	bl	8001204 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb0 	bl	80012dc <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e159      	b.n	8001658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8148 	bne.w	8001652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a2 	beq.w	8001652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b57      	ldr	r3, [pc, #348]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a49      	ldr	r2, [pc, #292]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x202>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a48      	ldr	r2, [pc, #288]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x1fe>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a47      	ldr	r2, [pc, #284]	@ (8001680 <HAL_GPIO_Init+0x2f8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <HAL_GPIO_Init+0x2fc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x1f6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a45      	ldr	r2, [pc, #276]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x1f2>
 8001576:	2304      	movs	r3, #4
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x204>
 800157a:	2307      	movs	r3, #7
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x204>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x204>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x204>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x204>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a24      	ldr	r2, [pc, #144]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_GPIO_Init+0x304>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_GPIO_Init+0x304>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_GPIO_Init+0x304>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a0f      	ldr	r2, [pc, #60]	@ (800168c <HAL_GPIO_Init+0x304>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f aea2 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40013c00 	.word	0x40013c00

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ac:	e003      	b.n	80016b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d4:	887a      	ldrh	r2, [r7, #2]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	041a      	lsls	r2, r3, #16
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43d9      	mvns	r1, r3
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	400b      	ands	r3, r1
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12b      	b.n	8001962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fb82 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	@ 0x24
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800174a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f001 fc1c 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a81      	ldr	r2, [pc, #516]	@ (800196c <HAL_I2C_Init+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x84>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a80      	ldr	r2, [pc, #512]	@ (8001970 <HAL_I2C_Init+0x278>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x92>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a7d      	ldr	r2, [pc, #500]	@ (8001974 <HAL_I2C_Init+0x27c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0e7      	b.n	8001962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a78      	ldr	r2, [pc, #480]	@ (8001978 <HAL_I2C_Init+0x280>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	@ (800196c <HAL_I2C_Init+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xd4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xe8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a69      	ldr	r2, [pc, #420]	@ (800197c <HAL_I2C_Init+0x284>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	495c      	ldr	r1, [pc, #368]	@ (800196c <HAL_I2C_Init+0x274>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d819      	bhi.n	8001834 <HAL_I2C_Init+0x13c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001814:	400b      	ands	r3, r1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_I2C_Init+0x138>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e59      	subs	r1, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	e051      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001830:	2304      	movs	r3, #4
 8001832:	e04f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_I2C_Init+0x168>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e012      	b.n	8001886 <HAL_I2C_Init+0x18e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x196>
 800188a:	2301      	movs	r3, #1
 800188c:	e022      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <HAL_I2C_Init+0x1bc>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e58      	subs	r0, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b2:	e00f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001902:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6911      	ldr	r1, [r2, #16]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68d2      	ldr	r2, [r2, #12]
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	000186a0 	.word	0x000186a0
 8001970:	001e847f 	.word	0x001e847f
 8001974:	003d08ff 	.word	0x003d08ff
 8001978:	431bde83 	.word	0x431bde83
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	817b      	strh	r3, [r7, #10]
 8001990:	4613      	mov	r3, r2
 8001992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fbe2 	bl	800115c <HAL_GetTick>
 8001998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	f040 80e0 	bne.w	8001b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2319      	movs	r3, #25
 80019ae:	2201      	movs	r2, #1
 80019b0:	4970      	ldr	r1, [pc, #448]	@ (8001b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 fc7e 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
 80019c0:	e0d3      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x50>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e0cc      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d007      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2221      	movs	r2, #33	@ 0x21
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2210      	movs	r2, #16
 8001a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4a50      	ldr	r2, [pc, #320]	@ (8001b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a38:	8979      	ldrh	r1, [r7, #10]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	6a3a      	ldr	r2, [r7, #32]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 face 	bl	8001fe0 <I2C_MasterRequestWrite>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e08d      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a64:	e066      	b.n	8001b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	6a39      	ldr	r1, [r7, #32]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 fd3c 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d107      	bne.n	8001a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06b      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d11b      	bne.n	8001b08 <HAL_I2C_Master_Transmit+0x188>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	6a39      	ldr	r1, [r7, #32]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fd33 	bl	8002578 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01a      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d194      	bne.n	8001a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	00100002 	.word	0x00100002
 8001b78:	ffff0000 	.word	0xffff0000

08001b7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	817b      	strh	r3, [r7, #10]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	813b      	strh	r3, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b96:	f7ff fae1 	bl	800115c <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	f040 8214 	bne.w	8001fd2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2319      	movs	r3, #25
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	497b      	ldr	r1, [pc, #492]	@ (8001da0 <HAL_I2C_Mem_Read+0x224>)
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb7d 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e207      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x56>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e200      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d007      	beq.n	8001bf8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2222      	movs	r2, #34	@ 0x22
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2240      	movs	r2, #64	@ 0x40
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a5b      	ldr	r2, [pc, #364]	@ (8001da4 <HAL_I2C_Mem_Read+0x228>)
 8001c38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c3a:	88f8      	ldrh	r0, [r7, #6]
 8001c3c:	893a      	ldrh	r2, [r7, #8]
 8001c3e:	8979      	ldrh	r1, [r7, #10]
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4603      	mov	r3, r0
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa4a 	bl	80020e4 <I2C_RequestMemoryRead>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1bc      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d113      	bne.n	8001c8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e190      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d11b      	bne.n	8001cca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e170      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	e150      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d20:	e144      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	f200 80f1 	bhi.w	8001f0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d123      	bne.n	8001d7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fc65 	bl	8002608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e145      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d7a:	e117      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d14e      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4906      	ldr	r1, [pc, #24]	@ (8001da8 <HAL_I2C_Mem_Read+0x22c>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fa90 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e11a      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
 8001d9e:	bf00      	nop
 8001da0:	00100002 	.word	0x00100002
 8001da4:	ffff0000 	.word	0xffff0000
 8001da8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e20:	e0c4      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e28:	2200      	movs	r2, #0
 8001e2a:	496c      	ldr	r1, [pc, #432]	@ (8001fdc <HAL_I2C_Mem_Read+0x460>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fa41 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cb      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e84:	2200      	movs	r2, #0
 8001e86:	4955      	ldr	r1, [pc, #340]	@ (8001fdc <HAL_I2C_Mem_Read+0x460>)
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fa13 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e09d      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f0c:	e04e      	b.n	8001fac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fb78 	bl	8002608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e058      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d124      	bne.n	8001fac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f78:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f aeb6 	bne.w	8001d22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	00010004 	.word	0x00010004

08001fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d006      	beq.n	800200a <I2C_MasterRequestWrite+0x2a>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d003      	beq.n	800200a <I2C_MasterRequestWrite+0x2a>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002008:	d108      	bne.n	800201c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e00b      	b.n	8002034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	2b12      	cmp	r3, #18
 8002022:	d107      	bne.n	8002034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f937 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800205a:	d103      	bne.n	8002064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e035      	b.n	80020d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002070:	d108      	bne.n	8002084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002072:	897b      	ldrh	r3, [r7, #10]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	e01b      	b.n	80020bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	11db      	asrs	r3, r3, #7
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 0306 	and.w	r3, r3, #6
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f063 030f 	orn	r3, r3, #15
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	490e      	ldr	r1, [pc, #56]	@ (80020dc <I2C_MasterRequestWrite+0xfc>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f980 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e010      	b.n	80020d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020b2:	897b      	ldrh	r3, [r7, #10]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4907      	ldr	r1, [pc, #28]	@ (80020e0 <I2C_MasterRequestWrite+0x100>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f970 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	00010008 	.word	0x00010008
 80020e0:	00010002 	.word	0x00010002

080020e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800210c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800211c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2200      	movs	r2, #0
 8002126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8c2 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002144:	d103      	bne.n	800214e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0aa      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	4952      	ldr	r1, [pc, #328]	@ (80022b0 <I2C_RequestMemoryRead+0x1cc>)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f91d 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e097      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800218e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f9a8 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00d      	beq.n	80021ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d107      	bne.n	80021b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e076      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e021      	b.n	8002210 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021cc:	893b      	ldrh	r3, [r7, #8]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021dc:	6a39      	ldr	r1, [r7, #32]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f982 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d107      	bne.n	8002202 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e050      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002212:	6a39      	ldr	r1, [r7, #32]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f967 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e035      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f82b 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002272:	d103      	bne.n	800227c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e013      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002280:	897b      	ldrh	r3, [r7, #10]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	4906      	ldr	r1, [pc, #24]	@ (80022b0 <I2C_RequestMemoryRead+0x1cc>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f886 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00010002 	.word	0x00010002

080022b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c4:	e048      	b.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022cc:	d044      	beq.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7fe ff45 	bl	800115c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d139      	bne.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <I2C_WaitOnFlagUntilTimeout+0x56>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	e00c      	b.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x70>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	429a      	cmp	r2, r3
 8002328:	d116      	bne.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e023      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10d      	bne.n	800237e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	e00c      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	43da      	mvns	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4013      	ands	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	429a      	cmp	r2, r3
 800239c:	d093      	beq.n	80022c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b6:	e071      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c6:	d123      	bne.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e067      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002416:	d041      	beq.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002418:	f7fe fea0 	bl	800115c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d302      	bcc.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d136      	bne.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e00b      	b.n	800246a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	43da      	mvns	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e021      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10c      	bne.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	43da      	mvns	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e00b      	b.n	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af6d 	bne.w	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8e3 	bl	80026c2 <I2C_IsAcknowledgeFailed>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e034      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800250c:	d028      	beq.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250e:	f7fe fe25 	bl	800115c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	d302      	bcc.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11d      	bne.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252e:	2b80      	cmp	r3, #128	@ 0x80
 8002530:	d016      	beq.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256a:	2b80      	cmp	r3, #128	@ 0x80
 800256c:	d1c3      	bne.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f89b 	bl	80026c2 <I2C_IsAcknowledgeFailed>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e034      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800259c:	d028      	beq.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fddd 	bl	800115c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d016      	beq.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d1c3      	bne.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002614:	e049      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b10      	cmp	r3, #16
 8002622:	d119      	bne.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e030      	b.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7fe fd80 	bl	800115c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11d      	bne.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002678:	2b40      	cmp	r3, #64	@ 0x40
 800267a:	d016      	beq.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e007      	b.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d1ae      	bne.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d8:	d11b      	bne.n	8002712 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e267      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d075      	beq.n	800282a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00c      	beq.n	8002764 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b85      	ldr	r3, [pc, #532]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002752:	2b08      	cmp	r3, #8
 8002754:	d112      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b82      	ldr	r3, [pc, #520]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05b      	beq.n	8002828 <HAL_RCC_OscConfig+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d157      	bne.n	8002828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e242      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x74>
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a75      	ldr	r2, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b70      	ldr	r3, [pc, #448]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 80027b8:	4b69      	ldr	r3, [pc, #420]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a68      	ldr	r2, [pc, #416]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fcc0 	bl	800115c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe fcbc 	bl	800115c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e207      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xc0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fcac 	bl	800115c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fca8 	bl	800115c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	@ 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1f3      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b51      	ldr	r3, [pc, #324]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0xe8>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1c7      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4937      	ldr	r1, [pc, #220]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x244>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fc61 	bl	800115c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fc5d 	bl	800115c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1a8      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4925      	ldr	r1, [pc, #148]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x244>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc40 	bl	800115c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fc3c 	bl	800115c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e187      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d036      	beq.n	8002978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_RCC_OscConfig+0x248>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fc20 	bl	800115c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fc1c 	bl	800115c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e167      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
 800293e:	e01b      	b.n	8002978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_OscConfig+0x248>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fc09 	bl	800115c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e00e      	b.n	800296c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fc05 	bl	800115c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d907      	bls.n	800296c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e150      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	4b88      	ldr	r3, [pc, #544]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ea      	bne.n	800294e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8097 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b81      	ldr	r3, [pc, #516]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b77      	ldr	r3, [pc, #476]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b74      	ldr	r3, [pc, #464]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a73      	ldr	r2, [pc, #460]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fbc5 	bl	800115c <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fbc1 	bl	800115c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e10c      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2ea>
 80029fc:	4b64      	ldr	r3, [pc, #400]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a63      	ldr	r2, [pc, #396]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x324>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x30c>
 8002a12:	4b5f      	ldr	r3, [pc, #380]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5e      	ldr	r2, [pc, #376]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a5b      	ldr	r2, [pc, #364]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x324>
 8002a2c:	4b58      	ldr	r3, [pc, #352]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a57      	ldr	r2, [pc, #348]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a38:	4b55      	ldr	r3, [pc, #340]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a54      	ldr	r2, [pc, #336]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fb86 	bl	800115c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fb82 	bl	800115c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0cb      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b49      	ldr	r3, [pc, #292]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ee      	beq.n	8002a54 <HAL_RCC_OscConfig+0x334>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe fb70 	bl	800115c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fb6c 	bl	800115c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0b5      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	4b3e      	ldr	r3, [pc, #248]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ee      	bne.n	8002a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	4a38      	ldr	r2, [pc, #224]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a1 	beq.w	8002c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abe:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d05c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d141      	bne.n	8002b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fb40 	bl	800115c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fb3c 	bl	800115c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e087      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	491b      	ldr	r1, [pc, #108]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fb15 	bl	800115c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fb11 	bl	800115c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e05c      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x416>
 8002b54:	e054      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fafe 	bl	800115c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fafa 	bl	800115c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e045      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x444>
 8002b82:	e03d      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e038      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007000 	.word	0x40007000
 8002b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x4ec>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d028      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d121      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11a      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fa2c 	bl	800115c <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fa28 	bl	800115c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f82d 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490a      	ldr	r1, [pc, #40]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe f98c 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	080043a0 	.word	0x080043a0
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_RCC_EnableCSS+0x14>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	4247004c 	.word	0x4247004c

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b090      	sub	sp, #64	@ 0x40
 8002dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0c:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d00d      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x40>
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	f200 80a1 	bhi.w	8002f60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e26:	e09b      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e2c:	e09b      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2e:	4b53      	ldr	r3, [pc, #332]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e32:	e098      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e34:	4b4f      	ldr	r3, [pc, #316]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d028      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	2200      	movs	r2, #0
 8002e52:	623b      	str	r3, [r7, #32]
 8002e54:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e60:	fb03 f201 	mul.w	r2, r3, r1
 8002e64:	2300      	movs	r3, #0
 8002e66:	fb00 f303 	mul.w	r3, r0, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a43      	ldr	r2, [pc, #268]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e74:	460a      	mov	r2, r1
 8002e76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7a:	4413      	add	r3, r2
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e80:	2200      	movs	r2, #0
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	61fa      	str	r2, [r7, #28]
 8002e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e8e:	f7fd fbb3 	bl	80005f8 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4613      	mov	r3, r2
 8002e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e9a:	e053      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9c:	4b35      	ldr	r3, [pc, #212]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	617a      	str	r2, [r7, #20]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eae:	f04f 0b00 	mov.w	fp, #0
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	465b      	mov	r3, fp
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec4:	0150      	lsls	r0, r2, #5
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	ebb2 080a 	subs.w	r8, r2, sl
 8002ece:	eb63 090b 	sbc.w	r9, r3, fp
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ede:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ee2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ee6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eea:	eb63 0509 	sbc.w	r5, r3, r9
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	00eb      	lsls	r3, r5, #3
 8002ef8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efc:	00e2      	lsls	r2, r4, #3
 8002efe:	4614      	mov	r4, r2
 8002f00:	461d      	mov	r5, r3
 8002f02:	eb14 030a 	adds.w	r3, r4, sl
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	eb45 030b 	adc.w	r3, r5, fp
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	028b      	lsls	r3, r1, #10
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f24:	4621      	mov	r1, r4
 8002f26:	028a      	lsls	r2, r1, #10
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	f7fd fb5e 	bl	80005f8 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f5e:	e002      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3740      	adds	r7, #64	@ 0x40
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	017d7840 	.word	0x017d7840

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f9c:	f7ff fff0 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0a9b      	lsrs	r3, r3, #10
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	080043b0 	.word	0x080043b0

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc4:	f7ff ffdc 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0b5b      	lsrs	r3, r3, #13
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	@ (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	080043b0 	.word	0x080043b0

08002fe8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff4:	2b80      	cmp	r3, #128	@ 0x80
 8002ff6:	d104      	bne.n	8003002 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002ff8:	f000 f80a 	bl	8003010 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_RCC_NMI_IRQHandler+0x24>)
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	701a      	strb	r2, [r3, #0]
  }
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	4002380e 	.word	0x4002380e

08003010 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e042      	b.n	80030b6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fd ff37 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2224      	movs	r2, #36	@ 0x24
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f9d2 	bl	800340c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003076:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003086:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003096:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b08a      	sub	sp, #40	@ 0x28
 80030c2:	af02      	add	r7, sp, #8
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d175      	bne.n	80031ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_Transmit+0x2c>
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06e      	b.n	80031cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2221      	movs	r2, #33	@ 0x21
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030fc:	f7fe f82e 	bl	800115c <HAL_GetTick>
 8003100:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	d108      	bne.n	800312a <HAL_UART_Transmit+0x6c>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e003      	b.n	8003132 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003132:	e02e      	b.n	8003192 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f86d 	bl	800321e <UART_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e03a      	b.n	80031cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	3302      	adds	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e007      	b.n	8003184 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1cb      	bne.n	8003134 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	@ 0x40
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f839 	bl	800321e <UART_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e006      	b.n	80031cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d112      	bne.n	8003214 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_UART_Receive_IT+0x26>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00b      	b.n	8003216 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	461a      	mov	r2, r3
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f860 	bl	80032d0 <UART_Start_Receive_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	e000      	b.n	8003216 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322e:	e03b      	b.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003236:	d037      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fd ff90 	bl	800115c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <UART_WaitOnFlagUntilTimeout+0x30>
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e03a      	b.n	80032c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b80      	cmp	r3, #128	@ 0x80
 8003264:	d020      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d01d      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b08      	cmp	r3, #8
 8003278:	d116      	bne.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f857 	bl	8003344 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2208      	movs	r2, #8
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e00f      	b.n	80032c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d0b4      	beq.n	8003230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2222      	movs	r2, #34	@ 0x22
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003314:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b095      	sub	sp, #84	@ 0x54
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800336c:	643a      	str	r2, [r7, #64]	@ 0x40
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003372:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e5      	bne.n	800334c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d119      	bne.n	80033f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033dc:	61ba      	str	r2, [r7, #24]
 80033de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033fe:	bf00      	nop
 8003400:	3754      	adds	r7, #84	@ 0x54
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b0c0      	sub	sp, #256	@ 0x100
 8003412:	af00      	add	r7, sp, #0
 8003414:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	ea40 0301 	orr.w	r3, r0, r1
 8003434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	431a      	orrs	r2, r3
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003464:	f021 010c 	bic.w	r1, r1, #12
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003472:	430b      	orrs	r3, r1
 8003474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003486:	6999      	ldr	r1, [r3, #24]
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	ea40 0301 	orr.w	r3, r0, r1
 8003492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b8f      	ldr	r3, [pc, #572]	@ (80036d8 <UART_SetConfig+0x2cc>)
 800349c:	429a      	cmp	r2, r3
 800349e:	d005      	beq.n	80034ac <UART_SetConfig+0xa0>
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b8d      	ldr	r3, [pc, #564]	@ (80036dc <UART_SetConfig+0x2d0>)
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d104      	bne.n	80034b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ac:	f7ff fd88 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 80034b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034b4:	e003      	b.n	80034be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b6:	f7ff fd6f 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80034ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	f040 810c 	bne.w	80036e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034e6:	415b      	adcs	r3, r3
 80034e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ee:	4621      	mov	r1, r4
 80034f0:	eb12 0801 	adds.w	r8, r2, r1
 80034f4:	4629      	mov	r1, r5
 80034f6:	eb43 0901 	adc.w	r9, r3, r1
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350e:	4690      	mov	r8, r2
 8003510:	4699      	mov	r9, r3
 8003512:	4623      	mov	r3, r4
 8003514:	eb18 0303 	adds.w	r3, r8, r3
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800351c:	462b      	mov	r3, r5
 800351e:	eb49 0303 	adc.w	r3, r9, r3
 8003522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003532:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800353a:	460b      	mov	r3, r1
 800353c:	18db      	adds	r3, r3, r3
 800353e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003540:	4613      	mov	r3, r2
 8003542:	eb42 0303 	adc.w	r3, r2, r3
 8003546:	657b      	str	r3, [r7, #84]	@ 0x54
 8003548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800354c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003550:	f7fd f852 	bl	80005f8 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <UART_SetConfig+0x2d4>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011c      	lsls	r4, r3, #4
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800356c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800357c:	415b      	adcs	r3, r3
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003584:	4641      	mov	r1, r8
 8003586:	eb12 0a01 	adds.w	sl, r2, r1
 800358a:	4649      	mov	r1, r9
 800358c:	eb43 0b01 	adc.w	fp, r3, r1
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800359c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a4:	4692      	mov	sl, r2
 80035a6:	469b      	mov	fp, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	eb1a 0303 	adds.w	r3, sl, r3
 80035ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b2:	464b      	mov	r3, r9
 80035b4:	eb4b 0303 	adc.w	r3, fp, r3
 80035b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035d0:	460b      	mov	r3, r1
 80035d2:	18db      	adds	r3, r3, r3
 80035d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035d6:	4613      	mov	r3, r2
 80035d8:	eb42 0303 	adc.w	r3, r2, r3
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035e6:	f7fd f807 	bl	80005f8 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80035f2:	fba3 2301 	umull	r2, r3, r3, r1
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2264      	movs	r2, #100	@ 0x64
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003606:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <UART_SetConfig+0x2d4>)
 8003608:	fba3 2302 	umull	r2, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003614:	441c      	add	r4, r3
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003620:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003630:	415b      	adcs	r3, r3
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003638:	4641      	mov	r1, r8
 800363a:	1851      	adds	r1, r2, r1
 800363c:	6339      	str	r1, [r7, #48]	@ 0x30
 800363e:	4649      	mov	r1, r9
 8003640:	414b      	adcs	r3, r1
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003650:	4659      	mov	r1, fp
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4651      	mov	r1, sl
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4642      	mov	r2, r8
 8003666:	189b      	adds	r3, r3, r2
 8003668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800366c:	464b      	mov	r3, r9
 800366e:	460a      	mov	r2, r1
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003684:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800368c:	460b      	mov	r3, r1
 800368e:	18db      	adds	r3, r3, r3
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003692:	4613      	mov	r3, r2
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800369e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036a2:	f7fc ffa9 	bl	80005f8 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2164      	movs	r1, #100	@ 0x64
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3332      	adds	r3, #50	@ 0x32
 80036be:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4422      	add	r2, r4
 80036d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d4:	e106      	b.n	80038e4 <UART_SetConfig+0x4d8>
 80036d6:	bf00      	nop
 80036d8:	40011000 	.word	0x40011000
 80036dc:	40011400 	.word	0x40011400
 80036e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	6239      	str	r1, [r7, #32]
 80036fe:	415b      	adcs	r3, r3
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
 8003702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003706:	4641      	mov	r1, r8
 8003708:	1854      	adds	r4, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb43 0501 	adc.w	r5, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	00eb      	lsls	r3, r5, #3
 800371a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371e:	00e2      	lsls	r2, r4, #3
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	4643      	mov	r3, r8
 8003726:	18e3      	adds	r3, r4, r3
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800372c:	464b      	mov	r3, r9
 800372e:	eb45 0303 	adc.w	r3, r5, r3
 8003732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003752:	4629      	mov	r1, r5
 8003754:	008b      	lsls	r3, r1, #2
 8003756:	4621      	mov	r1, r4
 8003758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375c:	4621      	mov	r1, r4
 800375e:	008a      	lsls	r2, r1, #2
 8003760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003764:	f7fc ff48 	bl	80005f8 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4b60      	ldr	r3, [pc, #384]	@ (80038f0 <UART_SetConfig+0x4e4>)
 800376e:	fba3 2302 	umull	r2, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	011c      	lsls	r4, r3, #4
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003780:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	61b9      	str	r1, [r7, #24]
 8003790:	415b      	adcs	r3, r3
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003798:	4641      	mov	r1, r8
 800379a:	1851      	adds	r1, r2, r1
 800379c:	6139      	str	r1, [r7, #16]
 800379e:	4649      	mov	r1, r9
 80037a0:	414b      	adcs	r3, r1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b0:	4659      	mov	r1, fp
 80037b2:	00cb      	lsls	r3, r1, #3
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ba:	4651      	mov	r1, sl
 80037bc:	00ca      	lsls	r2, r1, #3
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	4642      	mov	r2, r8
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037cc:	464b      	mov	r3, r9
 80037ce:	460a      	mov	r2, r1
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037f0:	4649      	mov	r1, r9
 80037f2:	008b      	lsls	r3, r1, #2
 80037f4:	4641      	mov	r1, r8
 80037f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fa:	4641      	mov	r1, r8
 80037fc:	008a      	lsls	r2, r1, #2
 80037fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003802:	f7fc fef9 	bl	80005f8 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4611      	mov	r1, r2
 800380c:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <UART_SetConfig+0x4e4>)
 800380e:	fba3 2301 	umull	r2, r3, r3, r1
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2264      	movs	r2, #100	@ 0x64
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	1acb      	subs	r3, r1, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	@ 0x32
 8003820:	4a33      	ldr	r2, [pc, #204]	@ (80038f0 <UART_SetConfig+0x4e4>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800382c:	441c      	add	r4, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	673b      	str	r3, [r7, #112]	@ 0x70
 8003836:	677a      	str	r2, [r7, #116]	@ 0x74
 8003838:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	415b      	adcs	r3, r3
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800387e:	464b      	mov	r3, r9
 8003880:	460a      	mov	r2, r1
 8003882:	eb42 0303 	adc.w	r3, r2, r3
 8003886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60
 8003892:	667a      	str	r2, [r7, #100]	@ 0x64
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038a0:	4649      	mov	r1, r9
 80038a2:	008b      	lsls	r3, r1, #2
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038aa:	4641      	mov	r1, r8
 80038ac:	008a      	lsls	r2, r1, #2
 80038ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038b2:	f7fc fea1 	bl	80005f8 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <UART_SetConfig+0x4e4>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	2164      	movs	r1, #100	@ 0x64
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	3332      	adds	r3, #50	@ 0x32
 80038ce:	4a08      	ldr	r2, [pc, #32]	@ (80038f0 <UART_SetConfig+0x4e4>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4422      	add	r2, r4
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038ea:	46bd      	mov	sp, r7
 80038ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f0:	51eb851f 	.word	0x51eb851f

080038f4 <_vsniprintf_r>:
 80038f4:	b530      	push	{r4, r5, lr}
 80038f6:	4614      	mov	r4, r2
 80038f8:	2c00      	cmp	r4, #0
 80038fa:	b09b      	sub	sp, #108	@ 0x6c
 80038fc:	4605      	mov	r5, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	da05      	bge.n	800390e <_vsniprintf_r+0x1a>
 8003902:	238b      	movs	r3, #139	@ 0x8b
 8003904:	6003      	str	r3, [r0, #0]
 8003906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800390a:	b01b      	add	sp, #108	@ 0x6c
 800390c:	bd30      	pop	{r4, r5, pc}
 800390e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003912:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	9319      	str	r3, [sp, #100]	@ 0x64
 800391c:	bf14      	ite	ne
 800391e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003922:	4623      	moveq	r3, r4
 8003924:	9302      	str	r3, [sp, #8]
 8003926:	9305      	str	r3, [sp, #20]
 8003928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800392c:	9100      	str	r1, [sp, #0]
 800392e:	9104      	str	r1, [sp, #16]
 8003930:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003934:	4669      	mov	r1, sp
 8003936:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003938:	f000 f8a8 	bl	8003a8c <_svfiprintf_r>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	bfbc      	itt	lt
 8003940:	238b      	movlt	r3, #139	@ 0x8b
 8003942:	602b      	strlt	r3, [r5, #0]
 8003944:	2c00      	cmp	r4, #0
 8003946:	d0e0      	beq.n	800390a <_vsniprintf_r+0x16>
 8003948:	9b00      	ldr	r3, [sp, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e7dc      	b.n	800390a <_vsniprintf_r+0x16>

08003950 <vsniprintf>:
 8003950:	b507      	push	{r0, r1, r2, lr}
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	460a      	mov	r2, r1
 8003958:	4601      	mov	r1, r0
 800395a:	4803      	ldr	r0, [pc, #12]	@ (8003968 <vsniprintf+0x18>)
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f7ff ffc9 	bl	80038f4 <_vsniprintf_r>
 8003962:	b003      	add	sp, #12
 8003964:	f85d fb04 	ldr.w	pc, [sp], #4
 8003968:	2000000c 	.word	0x2000000c

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__errno>:
 800397c:	4b01      	ldr	r3, [pc, #4]	@ (8003984 <__errno+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 fc64 	bl	8004268 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	080043f4 	.word	0x080043f4
 80039c4:	080043f4 	.word	0x080043f4
 80039c8:	080043f4 	.word	0x080043f4
 80039cc:	080043f8 	.word	0x080043f8

080039d0 <__retarget_lock_acquire_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <__retarget_lock_release_recursive>:
 80039d2:	4770      	bx	lr

080039d4 <__ssputs_r>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	688e      	ldr	r6, [r1, #8]
 80039da:	461f      	mov	r7, r3
 80039dc:	42be      	cmp	r6, r7
 80039de:	680b      	ldr	r3, [r1, #0]
 80039e0:	4682      	mov	sl, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4690      	mov	r8, r2
 80039e6:	d82d      	bhi.n	8003a44 <__ssputs_r+0x70>
 80039e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039f0:	d026      	beq.n	8003a40 <__ssputs_r+0x6c>
 80039f2:	6965      	ldr	r5, [r4, #20]
 80039f4:	6909      	ldr	r1, [r1, #16]
 80039f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039fa:	eba3 0901 	sub.w	r9, r3, r1
 80039fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a02:	1c7b      	adds	r3, r7, #1
 8003a04:	444b      	add	r3, r9
 8003a06:	106d      	asrs	r5, r5, #1
 8003a08:	429d      	cmp	r5, r3
 8003a0a:	bf38      	it	cc
 8003a0c:	461d      	movcc	r5, r3
 8003a0e:	0553      	lsls	r3, r2, #21
 8003a10:	d527      	bpl.n	8003a62 <__ssputs_r+0x8e>
 8003a12:	4629      	mov	r1, r5
 8003a14:	f000 f958 	bl	8003cc8 <_malloc_r>
 8003a18:	4606      	mov	r6, r0
 8003a1a:	b360      	cbz	r0, 8003a76 <__ssputs_r+0xa2>
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	464a      	mov	r2, r9
 8003a20:	f000 fbc2 	bl	80041a8 <memcpy>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	6126      	str	r6, [r4, #16]
 8003a32:	6165      	str	r5, [r4, #20]
 8003a34:	444e      	add	r6, r9
 8003a36:	eba5 0509 	sub.w	r5, r5, r9
 8003a3a:	6026      	str	r6, [r4, #0]
 8003a3c:	60a5      	str	r5, [r4, #8]
 8003a3e:	463e      	mov	r6, r7
 8003a40:	42be      	cmp	r6, r7
 8003a42:	d900      	bls.n	8003a46 <__ssputs_r+0x72>
 8003a44:	463e      	mov	r6, r7
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	f000 fb82 	bl	8004154 <memmove>
 8003a50:	68a3      	ldr	r3, [r4, #8]
 8003a52:	1b9b      	subs	r3, r3, r6
 8003a54:	60a3      	str	r3, [r4, #8]
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	4433      	add	r3, r6
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a62:	462a      	mov	r2, r5
 8003a64:	f000 fb48 	bl	80040f8 <_realloc_r>
 8003a68:	4606      	mov	r6, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d1e0      	bne.n	8003a30 <__ssputs_r+0x5c>
 8003a6e:	6921      	ldr	r1, [r4, #16]
 8003a70:	4650      	mov	r0, sl
 8003a72:	f000 fba7 	bl	80041c4 <_free_r>
 8003a76:	230c      	movs	r3, #12
 8003a78:	f8ca 3000 	str.w	r3, [sl]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a88:	e7e9      	b.n	8003a5e <__ssputs_r+0x8a>
	...

08003a8c <_svfiprintf_r>:
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	4698      	mov	r8, r3
 8003a92:	898b      	ldrh	r3, [r1, #12]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	b09d      	sub	sp, #116	@ 0x74
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	d510      	bpl.n	8003ac2 <_svfiprintf_r+0x36>
 8003aa0:	690b      	ldr	r3, [r1, #16]
 8003aa2:	b973      	cbnz	r3, 8003ac2 <_svfiprintf_r+0x36>
 8003aa4:	2140      	movs	r1, #64	@ 0x40
 8003aa6:	f000 f90f 	bl	8003cc8 <_malloc_r>
 8003aaa:	6028      	str	r0, [r5, #0]
 8003aac:	6128      	str	r0, [r5, #16]
 8003aae:	b930      	cbnz	r0, 8003abe <_svfiprintf_r+0x32>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab8:	b01d      	add	sp, #116	@ 0x74
 8003aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abe:	2340      	movs	r3, #64	@ 0x40
 8003ac0:	616b      	str	r3, [r5, #20]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad0:	2330      	movs	r3, #48	@ 0x30
 8003ad2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c70 <_svfiprintf_r+0x1e4>
 8003ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ada:	f04f 0901 	mov.w	r9, #1
 8003ade:	4623      	mov	r3, r4
 8003ae0:	469a      	mov	sl, r3
 8003ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae6:	b10a      	cbz	r2, 8003aec <_svfiprintf_r+0x60>
 8003ae8:	2a25      	cmp	r2, #37	@ 0x25
 8003aea:	d1f9      	bne.n	8003ae0 <_svfiprintf_r+0x54>
 8003aec:	ebba 0b04 	subs.w	fp, sl, r4
 8003af0:	d00b      	beq.n	8003b0a <_svfiprintf_r+0x7e>
 8003af2:	465b      	mov	r3, fp
 8003af4:	4622      	mov	r2, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ff6b 	bl	80039d4 <__ssputs_r>
 8003afe:	3001      	adds	r0, #1
 8003b00:	f000 80a7 	beq.w	8003c52 <_svfiprintf_r+0x1c6>
 8003b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b06:	445a      	add	r2, fp
 8003b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 809f 	beq.w	8003c52 <_svfiprintf_r+0x1c6>
 8003b14:	2300      	movs	r3, #0
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b1e:	f10a 0a01 	add.w	sl, sl, #1
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	9307      	str	r3, [sp, #28]
 8003b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b2c:	4654      	mov	r4, sl
 8003b2e:	2205      	movs	r2, #5
 8003b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b34:	484e      	ldr	r0, [pc, #312]	@ (8003c70 <_svfiprintf_r+0x1e4>)
 8003b36:	f7fc fb53 	bl	80001e0 <memchr>
 8003b3a:	9a04      	ldr	r2, [sp, #16]
 8003b3c:	b9d8      	cbnz	r0, 8003b76 <_svfiprintf_r+0xea>
 8003b3e:	06d0      	lsls	r0, r2, #27
 8003b40:	bf44      	itt	mi
 8003b42:	2320      	movmi	r3, #32
 8003b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b48:	0711      	lsls	r1, r2, #28
 8003b4a:	bf44      	itt	mi
 8003b4c:	232b      	movmi	r3, #43	@ 0x2b
 8003b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b52:	f89a 3000 	ldrb.w	r3, [sl]
 8003b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b58:	d015      	beq.n	8003b86 <_svfiprintf_r+0xfa>
 8003b5a:	9a07      	ldr	r2, [sp, #28]
 8003b5c:	4654      	mov	r4, sl
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f04f 0c0a 	mov.w	ip, #10
 8003b64:	4621      	mov	r1, r4
 8003b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b6a:	3b30      	subs	r3, #48	@ 0x30
 8003b6c:	2b09      	cmp	r3, #9
 8003b6e:	d94b      	bls.n	8003c08 <_svfiprintf_r+0x17c>
 8003b70:	b1b0      	cbz	r0, 8003ba0 <_svfiprintf_r+0x114>
 8003b72:	9207      	str	r2, [sp, #28]
 8003b74:	e014      	b.n	8003ba0 <_svfiprintf_r+0x114>
 8003b76:	eba0 0308 	sub.w	r3, r0, r8
 8003b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	46a2      	mov	sl, r4
 8003b84:	e7d2      	b.n	8003b2c <_svfiprintf_r+0xa0>
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	1d19      	adds	r1, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	9103      	str	r1, [sp, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbb      	ittet	lt
 8003b92:	425b      	neglt	r3, r3
 8003b94:	f042 0202 	orrlt.w	r2, r2, #2
 8003b98:	9307      	strge	r3, [sp, #28]
 8003b9a:	9307      	strlt	r3, [sp, #28]
 8003b9c:	bfb8      	it	lt
 8003b9e:	9204      	strlt	r2, [sp, #16]
 8003ba0:	7823      	ldrb	r3, [r4, #0]
 8003ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ba4:	d10a      	bne.n	8003bbc <_svfiprintf_r+0x130>
 8003ba6:	7863      	ldrb	r3, [r4, #1]
 8003ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003baa:	d132      	bne.n	8003c12 <_svfiprintf_r+0x186>
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bb8:	3402      	adds	r4, #2
 8003bba:	9305      	str	r3, [sp, #20]
 8003bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c80 <_svfiprintf_r+0x1f4>
 8003bc0:	7821      	ldrb	r1, [r4, #0]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	f7fc fb0b 	bl	80001e0 <memchr>
 8003bca:	b138      	cbz	r0, 8003bdc <_svfiprintf_r+0x150>
 8003bcc:	9b04      	ldr	r3, [sp, #16]
 8003bce:	eba0 000a 	sub.w	r0, r0, sl
 8003bd2:	2240      	movs	r2, #64	@ 0x40
 8003bd4:	4082      	lsls	r2, r0
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	3401      	adds	r4, #1
 8003bda:	9304      	str	r3, [sp, #16]
 8003bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be0:	4824      	ldr	r0, [pc, #144]	@ (8003c74 <_svfiprintf_r+0x1e8>)
 8003be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003be6:	2206      	movs	r2, #6
 8003be8:	f7fc fafa 	bl	80001e0 <memchr>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d036      	beq.n	8003c5e <_svfiprintf_r+0x1d2>
 8003bf0:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <_svfiprintf_r+0x1ec>)
 8003bf2:	bb1b      	cbnz	r3, 8003c3c <_svfiprintf_r+0x1b0>
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	3307      	adds	r3, #7
 8003bf8:	f023 0307 	bic.w	r3, r3, #7
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c02:	4433      	add	r3, r6
 8003c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c06:	e76a      	b.n	8003ade <_svfiprintf_r+0x52>
 8003c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e7a8      	b.n	8003b64 <_svfiprintf_r+0xd8>
 8003c12:	2300      	movs	r3, #0
 8003c14:	3401      	adds	r4, #1
 8003c16:	9305      	str	r3, [sp, #20]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 0c0a 	mov.w	ip, #10
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c24:	3a30      	subs	r2, #48	@ 0x30
 8003c26:	2a09      	cmp	r2, #9
 8003c28:	d903      	bls.n	8003c32 <_svfiprintf_r+0x1a6>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0c6      	beq.n	8003bbc <_svfiprintf_r+0x130>
 8003c2e:	9105      	str	r1, [sp, #20]
 8003c30:	e7c4      	b.n	8003bbc <_svfiprintf_r+0x130>
 8003c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c36:	4604      	mov	r4, r0
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e7f0      	b.n	8003c1e <_svfiprintf_r+0x192>
 8003c3c:	ab03      	add	r3, sp, #12
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462a      	mov	r2, r5
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <_svfiprintf_r+0x1f0>)
 8003c44:	a904      	add	r1, sp, #16
 8003c46:	4638      	mov	r0, r7
 8003c48:	f3af 8000 	nop.w
 8003c4c:	1c42      	adds	r2, r0, #1
 8003c4e:	4606      	mov	r6, r0
 8003c50:	d1d6      	bne.n	8003c00 <_svfiprintf_r+0x174>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	065b      	lsls	r3, r3, #25
 8003c56:	f53f af2d 	bmi.w	8003ab4 <_svfiprintf_r+0x28>
 8003c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c5c:	e72c      	b.n	8003ab8 <_svfiprintf_r+0x2c>
 8003c5e:	ab03      	add	r3, sp, #12
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	462a      	mov	r2, r5
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <_svfiprintf_r+0x1f0>)
 8003c66:	a904      	add	r1, sp, #16
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f000 f91b 	bl	8003ea4 <_printf_i>
 8003c6e:	e7ed      	b.n	8003c4c <_svfiprintf_r+0x1c0>
 8003c70:	080043b8 	.word	0x080043b8
 8003c74:	080043c2 	.word	0x080043c2
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	080039d5 	.word	0x080039d5
 8003c80:	080043be 	.word	0x080043be

08003c84 <sbrk_aligned>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	4e0f      	ldr	r6, [pc, #60]	@ (8003cc4 <sbrk_aligned+0x40>)
 8003c88:	460c      	mov	r4, r1
 8003c8a:	6831      	ldr	r1, [r6, #0]
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	b911      	cbnz	r1, 8003c96 <sbrk_aligned+0x12>
 8003c90:	f000 fa7a 	bl	8004188 <_sbrk_r>
 8003c94:	6030      	str	r0, [r6, #0]
 8003c96:	4621      	mov	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 fa75 	bl	8004188 <_sbrk_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	d103      	bne.n	8003caa <sbrk_aligned+0x26>
 8003ca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	1cc4      	adds	r4, r0, #3
 8003cac:	f024 0403 	bic.w	r4, r4, #3
 8003cb0:	42a0      	cmp	r0, r4
 8003cb2:	d0f8      	beq.n	8003ca6 <sbrk_aligned+0x22>
 8003cb4:	1a21      	subs	r1, r4, r0
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fa66 	bl	8004188 <_sbrk_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d1f2      	bne.n	8003ca6 <sbrk_aligned+0x22>
 8003cc0:	e7ef      	b.n	8003ca2 <sbrk_aligned+0x1e>
 8003cc2:	bf00      	nop
 8003cc4:	2000025c 	.word	0x2000025c

08003cc8 <_malloc_r>:
 8003cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ccc:	1ccd      	adds	r5, r1, #3
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	4606      	mov	r6, r0
 8003cde:	db01      	blt.n	8003ce4 <_malloc_r+0x1c>
 8003ce0:	42a9      	cmp	r1, r5
 8003ce2:	d904      	bls.n	8003cee <_malloc_r+0x26>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dc4 <_malloc_r+0xfc>
 8003cf2:	f000 f9f5 	bl	80040e0 <__malloc_lock>
 8003cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	bb44      	cbnz	r4, 8003d50 <_malloc_r+0x88>
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4630      	mov	r0, r6
 8003d02:	f7ff ffbf 	bl	8003c84 <sbrk_aligned>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	4604      	mov	r4, r0
 8003d0a:	d158      	bne.n	8003dbe <_malloc_r+0xf6>
 8003d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d10:	4627      	mov	r7, r4
 8003d12:	2f00      	cmp	r7, #0
 8003d14:	d143      	bne.n	8003d9e <_malloc_r+0xd6>
 8003d16:	2c00      	cmp	r4, #0
 8003d18:	d04b      	beq.n	8003db2 <_malloc_r+0xea>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	eb04 0903 	add.w	r9, r4, r3
 8003d24:	f000 fa30 	bl	8004188 <_sbrk_r>
 8003d28:	4581      	cmp	r9, r0
 8003d2a:	d142      	bne.n	8003db2 <_malloc_r+0xea>
 8003d2c:	6821      	ldr	r1, [r4, #0]
 8003d2e:	1a6d      	subs	r5, r5, r1
 8003d30:	4629      	mov	r1, r5
 8003d32:	4630      	mov	r0, r6
 8003d34:	f7ff ffa6 	bl	8003c84 <sbrk_aligned>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d03a      	beq.n	8003db2 <_malloc_r+0xea>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	442b      	add	r3, r5
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	f8d8 3000 	ldr.w	r3, [r8]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	bb62      	cbnz	r2, 8003da4 <_malloc_r+0xdc>
 8003d4a:	f8c8 7000 	str.w	r7, [r8]
 8003d4e:	e00f      	b.n	8003d70 <_malloc_r+0xa8>
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	1b52      	subs	r2, r2, r5
 8003d54:	d420      	bmi.n	8003d98 <_malloc_r+0xd0>
 8003d56:	2a0b      	cmp	r2, #11
 8003d58:	d917      	bls.n	8003d8a <_malloc_r+0xc2>
 8003d5a:	1961      	adds	r1, r4, r5
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	6025      	str	r5, [r4, #0]
 8003d60:	bf18      	it	ne
 8003d62:	6059      	strne	r1, [r3, #4]
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	bf08      	it	eq
 8003d68:	f8c8 1000 	streq.w	r1, [r8]
 8003d6c:	5162      	str	r2, [r4, r5]
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	4630      	mov	r0, r6
 8003d72:	f000 f9bb 	bl	80040ec <__malloc_unlock>
 8003d76:	f104 000b 	add.w	r0, r4, #11
 8003d7a:	1d23      	adds	r3, r4, #4
 8003d7c:	f020 0007 	bic.w	r0, r0, #7
 8003d80:	1ac2      	subs	r2, r0, r3
 8003d82:	bf1c      	itt	ne
 8003d84:	1a1b      	subne	r3, r3, r0
 8003d86:	50a3      	strne	r3, [r4, r2]
 8003d88:	e7af      	b.n	8003cea <_malloc_r+0x22>
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	bf0c      	ite	eq
 8003d90:	f8c8 2000 	streq.w	r2, [r8]
 8003d94:	605a      	strne	r2, [r3, #4]
 8003d96:	e7eb      	b.n	8003d70 <_malloc_r+0xa8>
 8003d98:	4623      	mov	r3, r4
 8003d9a:	6864      	ldr	r4, [r4, #4]
 8003d9c:	e7ae      	b.n	8003cfc <_malloc_r+0x34>
 8003d9e:	463c      	mov	r4, r7
 8003da0:	687f      	ldr	r7, [r7, #4]
 8003da2:	e7b6      	b.n	8003d12 <_malloc_r+0x4a>
 8003da4:	461a      	mov	r2, r3
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d1fb      	bne.n	8003da4 <_malloc_r+0xdc>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6053      	str	r3, [r2, #4]
 8003db0:	e7de      	b.n	8003d70 <_malloc_r+0xa8>
 8003db2:	230c      	movs	r3, #12
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 f998 	bl	80040ec <__malloc_unlock>
 8003dbc:	e794      	b.n	8003ce8 <_malloc_r+0x20>
 8003dbe:	6005      	str	r5, [r0, #0]
 8003dc0:	e7d6      	b.n	8003d70 <_malloc_r+0xa8>
 8003dc2:	bf00      	nop
 8003dc4:	20000260 	.word	0x20000260

08003dc8 <_printf_common>:
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	4616      	mov	r6, r2
 8003dce:	4698      	mov	r8, r3
 8003dd0:	688a      	ldr	r2, [r1, #8]
 8003dd2:	690b      	ldr	r3, [r1, #16]
 8003dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bfb8      	it	lt
 8003ddc:	4613      	movlt	r3, r2
 8003dde:	6033      	str	r3, [r6, #0]
 8003de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de4:	4607      	mov	r7, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	b10a      	cbz	r2, 8003dee <_printf_common+0x26>
 8003dea:	3301      	adds	r3, #1
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	0699      	lsls	r1, r3, #26
 8003df2:	bf42      	ittt	mi
 8003df4:	6833      	ldrmi	r3, [r6, #0]
 8003df6:	3302      	addmi	r3, #2
 8003df8:	6033      	strmi	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d106      	bne.n	8003e10 <_printf_common+0x48>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	6832      	ldr	r2, [r6, #0]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	dc26      	bgt.n	8003e5e <_printf_common+0x96>
 8003e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	3b00      	subs	r3, #0
 8003e18:	bf18      	it	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	0692      	lsls	r2, r2, #26
 8003e1e:	d42b      	bmi.n	8003e78 <_printf_common+0xb0>
 8003e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e24:	4641      	mov	r1, r8
 8003e26:	4638      	mov	r0, r7
 8003e28:	47c8      	blx	r9
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d01e      	beq.n	8003e6c <_printf_common+0xa4>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	6922      	ldr	r2, [r4, #16]
 8003e32:	f003 0306 	and.w	r3, r3, #6
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf02      	ittt	eq
 8003e3a:	68e5      	ldreq	r5, [r4, #12]
 8003e3c:	6833      	ldreq	r3, [r6, #0]
 8003e3e:	1aed      	subeq	r5, r5, r3
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	bf0c      	ite	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	2500      	movne	r5, #0
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bfc4      	itt	gt
 8003e4e:	1a9b      	subgt	r3, r3, r2
 8003e50:	18ed      	addgt	r5, r5, r3
 8003e52:	2600      	movs	r6, #0
 8003e54:	341a      	adds	r4, #26
 8003e56:	42b5      	cmp	r5, r6
 8003e58:	d11a      	bne.n	8003e90 <_printf_common+0xc8>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e008      	b.n	8003e70 <_printf_common+0xa8>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4652      	mov	r2, sl
 8003e62:	4641      	mov	r1, r8
 8003e64:	4638      	mov	r0, r7
 8003e66:	47c8      	blx	r9
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d103      	bne.n	8003e74 <_printf_common+0xac>
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7c6      	b.n	8003e06 <_printf_common+0x3e>
 8003e78:	18e1      	adds	r1, r4, r3
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	2030      	movs	r0, #48	@ 0x30
 8003e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e82:	4422      	add	r2, r4
 8003e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	e7c7      	b.n	8003e20 <_printf_common+0x58>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4622      	mov	r2, r4
 8003e94:	4641      	mov	r1, r8
 8003e96:	4638      	mov	r0, r7
 8003e98:	47c8      	blx	r9
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0e6      	beq.n	8003e6c <_printf_common+0xa4>
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7d9      	b.n	8003e56 <_printf_common+0x8e>
	...

08003ea4 <_printf_i>:
 8003ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	7e0f      	ldrb	r7, [r1, #24]
 8003eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eac:	2f78      	cmp	r7, #120	@ 0x78
 8003eae:	4691      	mov	r9, r2
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	469a      	mov	sl, r3
 8003eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eba:	d807      	bhi.n	8003ecc <_printf_i+0x28>
 8003ebc:	2f62      	cmp	r7, #98	@ 0x62
 8003ebe:	d80a      	bhi.n	8003ed6 <_printf_i+0x32>
 8003ec0:	2f00      	cmp	r7, #0
 8003ec2:	f000 80d1 	beq.w	8004068 <_printf_i+0x1c4>
 8003ec6:	2f58      	cmp	r7, #88	@ 0x58
 8003ec8:	f000 80b8 	beq.w	800403c <_printf_i+0x198>
 8003ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed4:	e03a      	b.n	8003f4c <_printf_i+0xa8>
 8003ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eda:	2b15      	cmp	r3, #21
 8003edc:	d8f6      	bhi.n	8003ecc <_printf_i+0x28>
 8003ede:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee4 <_printf_i+0x40>)
 8003ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f51 	.word	0x08003f51
 8003eec:	08003ecd 	.word	0x08003ecd
 8003ef0:	08003ecd 	.word	0x08003ecd
 8003ef4:	08003ecd 	.word	0x08003ecd
 8003ef8:	08003ecd 	.word	0x08003ecd
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003ecd 	.word	0x08003ecd
 8003f04:	08003ecd 	.word	0x08003ecd
 8003f08:	08003ecd 	.word	0x08003ecd
 8003f0c:	08003ecd 	.word	0x08003ecd
 8003f10:	0800404f 	.word	0x0800404f
 8003f14:	08003f7b 	.word	0x08003f7b
 8003f18:	08004009 	.word	0x08004009
 8003f1c:	08003ecd 	.word	0x08003ecd
 8003f20:	08003ecd 	.word	0x08003ecd
 8003f24:	08004071 	.word	0x08004071
 8003f28:	08003ecd 	.word	0x08003ecd
 8003f2c:	08003f7b 	.word	0x08003f7b
 8003f30:	08003ecd 	.word	0x08003ecd
 8003f34:	08003ecd 	.word	0x08003ecd
 8003f38:	08004011 	.word	0x08004011
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6032      	str	r2, [r6, #0]
 8003f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e09c      	b.n	800408a <_printf_i+0x1e6>
 8003f50:	6833      	ldr	r3, [r6, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	0606      	lsls	r6, r0, #24
 8003f5a:	d501      	bpl.n	8003f60 <_printf_i+0xbc>
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	e003      	b.n	8003f68 <_printf_i+0xc4>
 8003f60:	0645      	lsls	r5, r0, #25
 8003f62:	d5fb      	bpl.n	8003f5c <_printf_i+0xb8>
 8003f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	da03      	bge.n	8003f74 <_printf_i+0xd0>
 8003f6c:	232d      	movs	r3, #45	@ 0x2d
 8003f6e:	426d      	negs	r5, r5
 8003f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f74:	4858      	ldr	r0, [pc, #352]	@ (80040d8 <_printf_i+0x234>)
 8003f76:	230a      	movs	r3, #10
 8003f78:	e011      	b.n	8003f9e <_printf_i+0xfa>
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	0608      	lsls	r0, r1, #24
 8003f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f84:	d402      	bmi.n	8003f8c <_printf_i+0xe8>
 8003f86:	0649      	lsls	r1, r1, #25
 8003f88:	bf48      	it	mi
 8003f8a:	b2ad      	uxthmi	r5, r5
 8003f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f8e:	4852      	ldr	r0, [pc, #328]	@ (80040d8 <_printf_i+0x234>)
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	bf14      	ite	ne
 8003f94:	230a      	movne	r3, #10
 8003f96:	2308      	moveq	r3, #8
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f9e:	6866      	ldr	r6, [r4, #4]
 8003fa0:	60a6      	str	r6, [r4, #8]
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	db05      	blt.n	8003fb2 <_printf_i+0x10e>
 8003fa6:	6821      	ldr	r1, [r4, #0]
 8003fa8:	432e      	orrs	r6, r5
 8003faa:	f021 0104 	bic.w	r1, r1, #4
 8003fae:	6021      	str	r1, [r4, #0]
 8003fb0:	d04b      	beq.n	800404a <_printf_i+0x1a6>
 8003fb2:	4616      	mov	r6, r2
 8003fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fbc:	5dc7      	ldrb	r7, [r0, r7]
 8003fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc2:	462f      	mov	r7, r5
 8003fc4:	42bb      	cmp	r3, r7
 8003fc6:	460d      	mov	r5, r1
 8003fc8:	d9f4      	bls.n	8003fb4 <_printf_i+0x110>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d10b      	bne.n	8003fe6 <_printf_i+0x142>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	07df      	lsls	r7, r3, #31
 8003fd2:	d508      	bpl.n	8003fe6 <_printf_i+0x142>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	6861      	ldr	r1, [r4, #4]
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	bfde      	ittt	le
 8003fdc:	2330      	movle	r3, #48	@ 0x30
 8003fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003fe6:	1b92      	subs	r2, r2, r6
 8003fe8:	6122      	str	r2, [r4, #16]
 8003fea:	f8cd a000 	str.w	sl, [sp]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	aa03      	add	r2, sp, #12
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	f7ff fee7 	bl	8003dc8 <_printf_common>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d14a      	bne.n	8004094 <_printf_i+0x1f0>
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004002:	b004      	add	sp, #16
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	f043 0320 	orr.w	r3, r3, #32
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	4832      	ldr	r0, [pc, #200]	@ (80040dc <_printf_i+0x238>)
 8004012:	2778      	movs	r7, #120	@ 0x78
 8004014:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	061f      	lsls	r7, r3, #24
 800401e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004022:	d402      	bmi.n	800402a <_printf_i+0x186>
 8004024:	065f      	lsls	r7, r3, #25
 8004026:	bf48      	it	mi
 8004028:	b2ad      	uxthmi	r5, r5
 800402a:	6031      	str	r1, [r6, #0]
 800402c:	07d9      	lsls	r1, r3, #31
 800402e:	bf44      	itt	mi
 8004030:	f043 0320 	orrmi.w	r3, r3, #32
 8004034:	6023      	strmi	r3, [r4, #0]
 8004036:	b11d      	cbz	r5, 8004040 <_printf_i+0x19c>
 8004038:	2310      	movs	r3, #16
 800403a:	e7ad      	b.n	8003f98 <_printf_i+0xf4>
 800403c:	4826      	ldr	r0, [pc, #152]	@ (80040d8 <_printf_i+0x234>)
 800403e:	e7e9      	b.n	8004014 <_printf_i+0x170>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	f023 0320 	bic.w	r3, r3, #32
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	e7f6      	b.n	8004038 <_printf_i+0x194>
 800404a:	4616      	mov	r6, r2
 800404c:	e7bd      	b.n	8003fca <_printf_i+0x126>
 800404e:	6833      	ldr	r3, [r6, #0]
 8004050:	6825      	ldr	r5, [r4, #0]
 8004052:	6961      	ldr	r1, [r4, #20]
 8004054:	1d18      	adds	r0, r3, #4
 8004056:	6030      	str	r0, [r6, #0]
 8004058:	062e      	lsls	r6, r5, #24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	d501      	bpl.n	8004062 <_printf_i+0x1be>
 800405e:	6019      	str	r1, [r3, #0]
 8004060:	e002      	b.n	8004068 <_printf_i+0x1c4>
 8004062:	0668      	lsls	r0, r5, #25
 8004064:	d5fb      	bpl.n	800405e <_printf_i+0x1ba>
 8004066:	8019      	strh	r1, [r3, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	4616      	mov	r6, r2
 800406e:	e7bc      	b.n	8003fea <_printf_i+0x146>
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	6032      	str	r2, [r6, #0]
 8004076:	681e      	ldr	r6, [r3, #0]
 8004078:	6862      	ldr	r2, [r4, #4]
 800407a:	2100      	movs	r1, #0
 800407c:	4630      	mov	r0, r6
 800407e:	f7fc f8af 	bl	80001e0 <memchr>
 8004082:	b108      	cbz	r0, 8004088 <_printf_i+0x1e4>
 8004084:	1b80      	subs	r0, r0, r6
 8004086:	6060      	str	r0, [r4, #4]
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	2300      	movs	r3, #0
 800408e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004092:	e7aa      	b.n	8003fea <_printf_i+0x146>
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	4632      	mov	r2, r6
 8004098:	4649      	mov	r1, r9
 800409a:	4640      	mov	r0, r8
 800409c:	47d0      	blx	sl
 800409e:	3001      	adds	r0, #1
 80040a0:	d0ad      	beq.n	8003ffe <_printf_i+0x15a>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	079b      	lsls	r3, r3, #30
 80040a6:	d413      	bmi.n	80040d0 <_printf_i+0x22c>
 80040a8:	68e0      	ldr	r0, [r4, #12]
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	4298      	cmp	r0, r3
 80040ae:	bfb8      	it	lt
 80040b0:	4618      	movlt	r0, r3
 80040b2:	e7a6      	b.n	8004002 <_printf_i+0x15e>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4632      	mov	r2, r6
 80040b8:	4649      	mov	r1, r9
 80040ba:	4640      	mov	r0, r8
 80040bc:	47d0      	blx	sl
 80040be:	3001      	adds	r0, #1
 80040c0:	d09d      	beq.n	8003ffe <_printf_i+0x15a>
 80040c2:	3501      	adds	r5, #1
 80040c4:	68e3      	ldr	r3, [r4, #12]
 80040c6:	9903      	ldr	r1, [sp, #12]
 80040c8:	1a5b      	subs	r3, r3, r1
 80040ca:	42ab      	cmp	r3, r5
 80040cc:	dcf2      	bgt.n	80040b4 <_printf_i+0x210>
 80040ce:	e7eb      	b.n	80040a8 <_printf_i+0x204>
 80040d0:	2500      	movs	r5, #0
 80040d2:	f104 0619 	add.w	r6, r4, #25
 80040d6:	e7f5      	b.n	80040c4 <_printf_i+0x220>
 80040d8:	080043c9 	.word	0x080043c9
 80040dc:	080043da 	.word	0x080043da

080040e0 <__malloc_lock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	@ (80040e8 <__malloc_lock+0x8>)
 80040e2:	f7ff bc75 	b.w	80039d0 <__retarget_lock_acquire_recursive>
 80040e6:	bf00      	nop
 80040e8:	20000258 	.word	0x20000258

080040ec <__malloc_unlock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	@ (80040f4 <__malloc_unlock+0x8>)
 80040ee:	f7ff bc70 	b.w	80039d2 <__retarget_lock_release_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000258 	.word	0x20000258

080040f8 <_realloc_r>:
 80040f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fc:	4607      	mov	r7, r0
 80040fe:	4614      	mov	r4, r2
 8004100:	460d      	mov	r5, r1
 8004102:	b921      	cbnz	r1, 800410e <_realloc_r+0x16>
 8004104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004108:	4611      	mov	r1, r2
 800410a:	f7ff bddd 	b.w	8003cc8 <_malloc_r>
 800410e:	b92a      	cbnz	r2, 800411c <_realloc_r+0x24>
 8004110:	f000 f858 	bl	80041c4 <_free_r>
 8004114:	4625      	mov	r5, r4
 8004116:	4628      	mov	r0, r5
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411c:	f000 f89c 	bl	8004258 <_malloc_usable_size_r>
 8004120:	4284      	cmp	r4, r0
 8004122:	4606      	mov	r6, r0
 8004124:	d802      	bhi.n	800412c <_realloc_r+0x34>
 8004126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800412a:	d8f4      	bhi.n	8004116 <_realloc_r+0x1e>
 800412c:	4621      	mov	r1, r4
 800412e:	4638      	mov	r0, r7
 8004130:	f7ff fdca 	bl	8003cc8 <_malloc_r>
 8004134:	4680      	mov	r8, r0
 8004136:	b908      	cbnz	r0, 800413c <_realloc_r+0x44>
 8004138:	4645      	mov	r5, r8
 800413a:	e7ec      	b.n	8004116 <_realloc_r+0x1e>
 800413c:	42b4      	cmp	r4, r6
 800413e:	4622      	mov	r2, r4
 8004140:	4629      	mov	r1, r5
 8004142:	bf28      	it	cs
 8004144:	4632      	movcs	r2, r6
 8004146:	f000 f82f 	bl	80041a8 <memcpy>
 800414a:	4629      	mov	r1, r5
 800414c:	4638      	mov	r0, r7
 800414e:	f000 f839 	bl	80041c4 <_free_r>
 8004152:	e7f1      	b.n	8004138 <_realloc_r+0x40>

08004154 <memmove>:
 8004154:	4288      	cmp	r0, r1
 8004156:	b510      	push	{r4, lr}
 8004158:	eb01 0402 	add.w	r4, r1, r2
 800415c:	d902      	bls.n	8004164 <memmove+0x10>
 800415e:	4284      	cmp	r4, r0
 8004160:	4623      	mov	r3, r4
 8004162:	d807      	bhi.n	8004174 <memmove+0x20>
 8004164:	1e43      	subs	r3, r0, #1
 8004166:	42a1      	cmp	r1, r4
 8004168:	d008      	beq.n	800417c <memmove+0x28>
 800416a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800416e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004172:	e7f8      	b.n	8004166 <memmove+0x12>
 8004174:	4402      	add	r2, r0
 8004176:	4601      	mov	r1, r0
 8004178:	428a      	cmp	r2, r1
 800417a:	d100      	bne.n	800417e <memmove+0x2a>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004186:	e7f7      	b.n	8004178 <memmove+0x24>

08004188 <_sbrk_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_sbrk_r+0x1c>)
 800418c:	2300      	movs	r3, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fc ff0a 	bl	8000fac <_sbrk>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_sbrk_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_sbrk_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000264 	.word	0x20000264

080041a8 <memcpy>:
 80041a8:	440a      	add	r2, r1
 80041aa:	4291      	cmp	r1, r2
 80041ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041b0:	d100      	bne.n	80041b4 <memcpy+0xc>
 80041b2:	4770      	bx	lr
 80041b4:	b510      	push	{r4, lr}
 80041b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041be:	4291      	cmp	r1, r2
 80041c0:	d1f9      	bne.n	80041b6 <memcpy+0xe>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <_free_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4605      	mov	r5, r0
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d041      	beq.n	8004250 <_free_r+0x8c>
 80041cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d0:	1f0c      	subs	r4, r1, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfb8      	it	lt
 80041d6:	18e4      	addlt	r4, r4, r3
 80041d8:	f7ff ff82 	bl	80040e0 <__malloc_lock>
 80041dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <_free_r+0x90>)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	b933      	cbnz	r3, 80041f0 <_free_r+0x2c>
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	6014      	str	r4, [r2, #0]
 80041e6:	4628      	mov	r0, r5
 80041e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ec:	f7ff bf7e 	b.w	80040ec <__malloc_unlock>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d908      	bls.n	8004206 <_free_r+0x42>
 80041f4:	6820      	ldr	r0, [r4, #0]
 80041f6:	1821      	adds	r1, r4, r0
 80041f8:	428b      	cmp	r3, r1
 80041fa:	bf01      	itttt	eq
 80041fc:	6819      	ldreq	r1, [r3, #0]
 80041fe:	685b      	ldreq	r3, [r3, #4]
 8004200:	1809      	addeq	r1, r1, r0
 8004202:	6021      	streq	r1, [r4, #0]
 8004204:	e7ed      	b.n	80041e2 <_free_r+0x1e>
 8004206:	461a      	mov	r2, r3
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b10b      	cbz	r3, 8004210 <_free_r+0x4c>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d9fa      	bls.n	8004206 <_free_r+0x42>
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	1850      	adds	r0, r2, r1
 8004214:	42a0      	cmp	r0, r4
 8004216:	d10b      	bne.n	8004230 <_free_r+0x6c>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	4401      	add	r1, r0
 800421c:	1850      	adds	r0, r2, r1
 800421e:	4283      	cmp	r3, r0
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	d1e0      	bne.n	80041e6 <_free_r+0x22>
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	6053      	str	r3, [r2, #4]
 800422a:	4408      	add	r0, r1
 800422c:	6010      	str	r0, [r2, #0]
 800422e:	e7da      	b.n	80041e6 <_free_r+0x22>
 8004230:	d902      	bls.n	8004238 <_free_r+0x74>
 8004232:	230c      	movs	r3, #12
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	e7d6      	b.n	80041e6 <_free_r+0x22>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	1821      	adds	r1, r4, r0
 800423c:	428b      	cmp	r3, r1
 800423e:	bf04      	itt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	6063      	str	r3, [r4, #4]
 8004246:	bf04      	itt	eq
 8004248:	1809      	addeq	r1, r1, r0
 800424a:	6021      	streq	r1, [r4, #0]
 800424c:	6054      	str	r4, [r2, #4]
 800424e:	e7ca      	b.n	80041e6 <_free_r+0x22>
 8004250:	bd38      	pop	{r3, r4, r5, pc}
 8004252:	bf00      	nop
 8004254:	20000260 	.word	0x20000260

08004258 <_malloc_usable_size_r>:
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f18      	subs	r0, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbc      	itt	lt
 8004262:	580b      	ldrlt	r3, [r1, r0]
 8004264:	18c0      	addlt	r0, r0, r3
 8004266:	4770      	bx	lr

08004268 <_init>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr

08004274 <_fini>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr
