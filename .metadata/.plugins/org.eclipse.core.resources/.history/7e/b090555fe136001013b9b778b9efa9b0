/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//need for uart
#include <stdarg.h>
#include <string.h>
#include <stdio.h>

#include <stdbool.h>


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
// I²C address (7-bit) shifted for HAL
#ifndef INA226_I2C_ADDR
  #define INA226_I2C_ADDR      (0x40 << 1)
#endif
#define INA226_REG_CONF        0x00
#define INA226_REG_CALIB       0x05
#define INA226_REG_MASK_EN     0x06
#define INA226_REG_CURRENT     0x04
#define INA226_FLAG_CRDY       0x0400
#define INA226_SHUNT_OHM       0.00075f    // 0.75 mΩ
#define INA226_I_MAX           100.0f      // 100 A
#define INA226_CONF_DEFAULT    (0x0000 | 0x0100 | 0x0080 | 0x0007)
#define INA226_CURRENT_LSB     (INA226_I_MAX / 32768.0f)
#define INA226_CALIB_VALUE     ((uint16_t)(0.00512f / (INA226_CURRENT_LSB * INA226_SHUNT_OHM)))

#define UART1_BUFFER_SIZE 100
uint8_t uart1_rx_buffer[UART1_BUFFER_SIZE];
uint8_t uart1_rx_char;
uint16_t uart1_rx_index = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void processUart1Command(char *command); // For USART1 commands
void debugFTDI(const char *fmt, ...);
bool INA226_Init(I2C_HandleTypeDef *hi2c);
bool INA226_ReadCurrent(I2C_HandleTypeDef *hi2c, float *outCurrent);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool INA226_Init(I2C_HandleTypeDef *hi2c)
{
    uint8_t buf[3];

    // 1) Reset device (write 0x8000 to CONFIG)
    buf[0] = INA226_REG_CONF;
    buf[1] = 0x80;
    buf[2] = 0x00;
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
        return false;
    HAL_Delay(1);

    // 2) Write default CONFIG (averaging, conversion times, continuous)
    buf[0] = INA226_REG_CONF;
    buf[1] = (uint8_t)(INA226_CONF_DEFAULT >> 8);
    buf[2] = (uint8_t)(INA226_CONF_DEFAULT & 0xFF);
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
        return false;

    // 3) Write CALIBRATION register
    buf[0] = INA226_REG_CALIB;
    buf[1] = (uint8_t)(INA226_CALIB_VALUE >> 8);
    buf[2] = (uint8_t)(INA226_CALIB_VALUE & 0xFF);
    if (HAL_I2C_Master_Transmit(hi2c, INA226_I2C_ADDR, buf, 3, HAL_MAX_DELAY) != HAL_OK)
        return false;

    return true;
}

/**
 * @brief  Read current (in Amps) from INA226.
 * @param  hi2c        Your HAL I2C handle
 * @param  outCurrent  Pointer to float to receive the result
 * @return true on success, false on I²C error or timeout
 */
bool INA226_ReadCurrent(I2C_HandleTypeDef *hi2c, float *outCurrent)
{
    uint8_t buf[2];
    uint16_t mask, raw;
    uint32_t start = HAL_GetTick();

    // 1) Wait for conversion ready (timeout 10 ms)
    do {
        if (HAL_I2C_Mem_Read(hi2c, INA226_I2C_ADDR, INA226_REG_MASK_EN,
                             I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY) != HAL_OK)
            return false;
        mask = (buf[0] << 8) | buf[1];
    } while (((HAL_GetTick() - start) < 10) && ((mask & INA226_FLAG_CRDY) == 0));

    if ((mask & INA226_FLAG_CRDY) == 0)
        return false;  // timeout

    // 2) Read CURRENT register
    if (HAL_I2C_Mem_Read(hi2c, INA226_I2C_ADDR, INA226_REG_CURRENT,
                         I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY) != HAL_OK)
        return false;
    raw = (buf[0] << 8) | buf[1];

    // 3) Convert two’s-complement raw value to Amps
    *outCurrent = (int16_t)raw * INA226_CURRENT_LSB;
    return true;
}
void debugFTDI(const char *fmt, ...) {
	char buf[450];
	va_list args;
	va_start(args, fmt);
	int len = vsnprintf(buf, sizeof(buf), fmt, args);
	va_end(args);

	if (len > 0) {
		// ensure we don’t overrun if vsnprintf truncated
		uint16_t txlen = (len < sizeof(buf)) ? len : (sizeof(buf) - 1);
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, txlen, HAL_MAX_DELAY);
	}
}


/**
 * @brief Processes UART commands received on USART1.
 * @param command The command string to process.
 */
void processUart1Command(char *command) {
	debugFTDI("Received command: [%s]\r\n", command);
	// Remove any trailing \r or \n characters
	size_t len = strlen(command);
	while (len > 0 && (command[len - 1] == '\r' || command[len - 1] == '\n')) {
		command[--len] = '\0';
	}

	// Get the first token separated by "/"
	char *token = strtok(command, "/");
	while (token != NULL) {
		debugFTDI("Processing token: [%s]\r\n", token);
		// Find the colon separator position manually
		char *colonPos = strchr(token, ':');

		if (colonPos != NULL) {
			// Null-terminate the key part
			*colonPos = '\0';
			char *key = token;
			char *valueStr = colonPos + 1;  // Value starts after the colon

			// Debug key-value pair
			char debugPair[100];
			snprintf(debugPair, sizeof(debugPair), "Key: [%s], Value: [%s]\r\n",
					key, valueStr);
			HAL_UART_Transmit(&huart1, (uint8_t*) debugPair, strlen(debugPair),
			HAL_MAX_DELAY);

			if (strcmp(key, "WRITE_ENABLE_PWM") == 0) {
//				char msg[50];
//				snprintf(msg, sizeof(msg), "WRITE_ENABLE_PWM command: %s\r\n",
//						key);
//				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
//				HAL_MAX_DELAY);
//				enablePwmMain();
			}
			// Other command handlers follow the same pattern...
			else {
				// Unknown command
				char msg[50];
				snprintf(msg, sizeof(msg), "Unknown command: %s\r\n", key);
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
				HAL_MAX_DELAY);
			}
		}

		// Get next token
		token = strtok(NULL, "/");
	}
}
/**
 * @brief UART Receive Complete Callback with improved buffering.
 * @param huart UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

		// Check if the received character is a newline
		if (uart1_rx_char == '\n') {
			// Terminate the string properly
			if (uart1_rx_index > 0
					&& uart1_rx_buffer[uart1_rx_index - 1] == '\r') {
				uart1_rx_buffer[uart1_rx_index - 1] = '\0'; // Remove \r
			} else {
				uart1_rx_buffer[uart1_rx_index] = '\0'; // Just add null terminator
			}

			// Process the complete command
			processUart1Command((char*) uart1_rx_buffer);

			// Reset buffer index for next command
			uart1_rx_index = 0;
		}
		// Handle normal character storage (not newline or carriage return)
		else if (uart1_rx_char != '\r'
				&& uart1_rx_index < UART1_BUFFER_SIZE - 1) {
			uart1_rx_buffer[uart1_rx_index++] = uart1_rx_char;
		}

		// Always restart reception for next character
		HAL_UART_Receive_IT(&huart1, &uart1_rx_char, 1);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &uart1_rx_char, 1);  // Start UART reception
  if (!INA226_Init(&hi2c1)) {
      debugFTDI("INA226 init FAILED!\r\n");
      while (1);
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  TestINA226(&hi2c1);
      debugFTDI("loop\r\n");
	  HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
